name: release
on:
  push:
    tags:
      - '*'

jobs:
  # The create-release job creates a GitHub release, and the build-release
  # job will upload the artifact to that release
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts
      - name: Get the release version from the tag
        if: env.BIN_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "BIN_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.BIN_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BIN_VERSION }}
          release_name: ${{ env.BIN_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.BIN_VERSION }}" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  # This job actually builds the android application
  build-release:
    name: build-release
    needs: ['create-release'] # Do not execute before create-release is done
    runs-on: ubuntu-latest
    container: thyrlian/android-sdk:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      # Download the file containing the upload URL
      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: artifacts
          path: artifacts

      # Prepare the environment for uploading the artifact
      - name: Set release upload URL and release version
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/release-upload-url)"
          echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
          echo "release upload url: $RELEASE_UPLOAD_URL"
          release_version="$(cat artifacts/release-version)"
          echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV
          echo "release version: $RELEASE_VERSION"

      # Install dependencies and setup keystore
      - name: Setup environment
        shell: bash
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          apt-get update && apt-get install -y file make
          echo "$KEYSTORE_BASE64" | base64 -d > shoppinglist.keystore 

      - name: Build application
        shell: bash
        env:
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          ./gradlew assembleRelease

      - name: Prepare upload
        shell: bash
        run: |
          echo "ASSET_NAME=shoppinglist-${RELEASE_VERSION}.apk" >> $GITHUB_ENV
          echo "ASSET_PATH=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_ENV

      - name: Perform upload
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
          
